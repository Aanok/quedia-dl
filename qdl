#!/bin/bash
# Basic interface to https://quedia.tv

VERSION='1.1'
version_regex='[[:digit:]]+\.[[:digit:]]+'


########## HELPER FUNCTIONS ###########
usage() {
	echo "qdl v${VERSION}
  -h | --help | help
  update
  login
  latest [n]
  search <str>
  list <series_id>+
  all [-d <outputdir>] <series_id>
  [-d <outputdir>] <episode_id>+"
}


missing_arg_error() {
	echo "Error: \""$1"\" requires a non-empty option argument." >&2
	exit 1
}


cookiejar_assert_ok() {
	[[ ! -r "${cookiejar}" ]] && { echo "Error: ${cookiejar} does not exist or cannot be read by current user. This is expected if you have never logged in." >&2; exit 1; }
}


json_status_assert_ok() {
	[[ "$(jq '.status == "error"' <<< "$1")" == 'true' ]] && { echo 'Error. Your session probably expired. Try logging in again.' >&2; exit 1; }
}


http_status_assert_ok() {
	local status="$(sed -n '1s/HTTP\/1.1 \(...\).*/\1/p' <<< "$1")"
	case "${status}" in
		"302")
			# success
			;;
		"404")
			echo "Error: file not found. Please check ID is correct." >&2
			exit 1
			;;
		"403")
			echo "Error: unauthorized. Your session probably expired. Try logging in again." >&2
			exit 1
			;;
		*)
			echo "Error: HTTPS request returned status code ${status}." >&2
			exit 1
			;;
	esac
}


number_assert_ok() {
	local regex='[[:digit:]]+'
	[[ ! "$1" =~ $regex ]] && { echo 'Error: argument should be a number.' >&2; exit 1; }
	[[ "$1" -lt 1 ]] && { echo 'Error: number should be greater than 0.' >&2; exit 1; }
}


quedia_request() {
	if [[ -n "$2" ]]; then
		curl -s -H "Accept: application/json" -H "Content-Type: application/json" -b "${cookiejar}" --data-raw "$2" "https://quedia.tv/api/$1"
	else
		curl -s -H "Accept: application/json" -H "Content-Type: application/json" -b "${cookiejar}" "https://quedia.tv/api/$1"
	fi
}


url_decode() {
	printf '%b' "${1//%/\\x}"
}


jq_print_get_series() {
	jq -r '.response[] as $items | ("> " + ($items.id | tostring) + " " + $items.name + ": " + $items.description)' <<< "$1"
}


# usage: dl_episode id outputdir
dl_episode() {
	cookiejar_assert_ok
	local reply="$(curl -si -b "${cookiejar}" "https://quedia.tv/api/storage/get_download_link/$1")"
	http_status_assert_ok "${reply}"
	local url="https://quedia.tv$(sed -n 's/Location: \(.*\)/\1/p' <<< "${reply}")"
	url="${url%$'\r'}"
	local filename="$(url_decode "${url##*/}")"
	local destination="${2}/${filename}"
	echo "Downloading ${destination}"
	if [[ -e "${destination}" ]]; then
		echo $'\tDestination already exists on filesystem, skipping.'
	else
		curl -o "${destination}" -b "${cookiejar}" "${url}"
	fi
}
#######################################


# check dependencies
command -v jq >/dev/null || { echo "Error: program jq not found." >&2; exit 1; }
command -v curl >/dev/null || { echo "Error: program curl not found." >&2; exit 1; }

# check argcount
[[ "$#" -lt 1 ]] && { usage; exit 1; }

# cookiejar path
user_data_prefix="${XDG_DATA_HOME:-${HOME}/.local/share}"
mkdir -p "${user_data_prefix}/quedia-dl"
cookiejar="${user_data_prefix}/quedia-dl/cookiejar"


while [[ -n "$1" ]]; do
	case "$1" in
		-h|--help|help)
			usage
			exit 0
			;;
		update)
			echo "Local v${VERSION}."
			remote_version="$(curl -s 'https://raw.githubusercontent.com/Aanok/quedia-dl/master/version')" || { echo 'ERROR: network error.' >&2; exit 1; }
			[[ "${remote_version}" =~ $version_regex ]] || { echo "ERROR: ${remote_version}." >&2; exit 1; }
			[[ "${remote_version}" == "${VERSION}" ]] && { echo 'Up-to-date.'; exit 0; }
			echo "Found remote v${remote_version}."
			if curl -o "$(readlink -f "$0")" 'https://raw.githubusercontent.com/Aanok/quedia-dl/master/qdl'; then
				echo 'Updated successfully.'
				exit 0
			else
				echo 'ERROR: could not update script.'
				exit 1
			fi
			;;
		login)
			read -p "Username: " -r username
			read -p "Password: " -s -r password
			echo
			login_payload="$(jq -n -aRc --arg username "${username}" --arg "password" "${password}" '{username: $username, password: $password}')"
			if [[ "$(curl -s -H "Accept: application/json" -H "Content-Type: application/json" --data-raw "${login_payload}" -c "${cookiejar}" 'https://quedia.tv/api/profile/login' | jq '.status == "ok"')" == 'true' ]]; then
				chmod 600 "${cookiejar}"
				echo 'Login successful.' >&2
                exit 0
			else
				echo 'Error. Please double check your credentials.' >&2
				rm -f "${cookiejar}"
				exit 1
			fi
			;;
		latest)
            shift
			cookiejar_assert_ok
			latest_payload='{"limit":0}'
			[[ -n "$1" ]] && { number_assert_ok "$1"; latest_payload="{\"limit\":$1}"; shift; }
			json_reply="$(quedia_request "media/get_series" "${latest_payload}")"
			json_status_assert_ok "${json_reply}"
			jq_print_get_series "${json_reply}"
			;;
		search)
			shift
			[[ -z "$1" ]] && missing_arg_error 'search'
			cookiejar_assert_ok
			search_payload="$(jq -n -aRc --arg str "$(echo "$@")" '{search: $str}')"
			json_reply="$(quedia_request "media/get_series" "${search_payload}")"
			json_status_assert_ok "${json_reply}"
			jq_print_get_series "${json_reply}"
            shift "$#"
			;;
		list)
            shift
			[[ -z "$1" ]] && missing_arg_error 'list'
            while [[ -n "$1" ]]; do
                cookiejar_assert_ok
                number_assert_ok "$1"
                json_reply="$(quedia_request "media/get_series" "{\"id\":${1},\"depth\":3}")"
                json_status_assert_ok
                jq -r '.response[].seasons[].episodes[].signatures[] as $items | ($items.uid + " " + $items.filename)' <<< "${json_reply}"
                shift
            done
			;;
		all)
            shift
			outputdir='.'
			if [[ "$1" == '-d' ]]; then
				[[ -z "$2" ]] && missing_arg_error '-d'
				outputdir="$2"
				shift 2
			fi
			[[ -z "$1" ]] && missing_arg_error 'all'
            while [[ -n "$1" ]]; do
                cookiejar_assert_ok
                number_assert_ok "$1"
                json_reply="$(quedia_request "media/get_series" "{\"id\":${1},\"depth\":3}")"
                json_status_assert_ok
                for id in $(jq -r '.response[].seasons[].episodes[].signatures[] as $items | $items.uid' <<< "${json_reply}"); do
                    dl_episode "${id}" "${outputdir}"
                done
                shift
            done
			;;
		*)
			outputdir='.'
			if [[ "$1" == '-d' ]]; then
				[[ -z "$2" ]] && missing_arg_error '-d'
				outputdir="$2"
				shift; shift
			fi
			[[ -z "$1" ]] && { usage; exit 1; }
			while [[ -n "$1" ]]; do
				dl_episode "$1" "${outputdir}"
				shift
			done
			;;
	esac
	shift
done

exit 0
